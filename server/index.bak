const app = require('express')();
const server = require('http').createServer(app);
const io = require('socket.io')(server);
const util = require('util');
const lodash = require('lodash');

const execFile = util.promisify(require('child_process').execFile);

const startRedis = async () => {
  const { stdout } = await execFile('../third_party/redis-stable/src/redis-server');
  console.log(stdout);
}

startRedis();

// Redis Client

const redis = require('redis');

const RedisClient = redis.createClient({host : 'localhost', port : 6379})

RedisClient.on('ready',function() {
 console.log("Redis is ready");
});

RedisClient.on('error',function() {
    console.log("Error in Redis");
});

// RedisClient.on('message', (channel, message)=> {
//     console.log(`Message : ${message} on Channel ${channel}`);
// })

// RedisClient.subscribe('digitalComb')

// declare obj messages to send to clients
const response = {
    connected : { response : 'registered'},
    duplicate : { response : 'already_registered'},
    validData : { response : 'received_data'}
}

const sensorType = {
    LTE : 'LTE',
    BLE : 'BLE',
    NFC : 'NFC',
    HRD_ENC : 'HRD_ENC',
    VPN : 'VPN',
    WIFI : 'WIFI',
    GPS : 'GPS',
    AV : 'AV',
    MDM : 'MDM'
}

io.on('connection', (socket) => {
    console.log(`client connected with id: ${socket.id}`)

    // ack response back to the client upon successful data collection
    const sendValidResponse = (UUID) => {
        socket.emit(UUID, response.validData);
    }

    // reject the registration and send a message
    const rejectRegistration = (UUID) => {
        socket.emit(UUID, response.duplicate)
        console.log(`Device ${UUID} rejected registratio because of duplication`)
    }

    // accept the user registration
    const acceptRegistration = (UUID) => {
        RedisClient.RPUSH('RegisteredDevices', UUID, (err, reply)=> {
            socket.emit(UUID, response.connected)
            console.log(`Device ${UUID} registered at position ${reply}`)
            err ? console.error(err) : false
        });
    }

    socket.on('getDATA', (UUID) => {
        RedisClient.HGETALL(UUID, (err, reply) => {
            socket.emit(UUID, reply);
            console.log(reply)
        })
    })

    socket.on('test', () => {
        console.log('got a test message from test, emitting response')
        socket.broadcast.emit('response', 'hello friends!');
    })

    // register the user using UUID
    socket.on('register', (UUID) => {
        console.log('User is requesting to register : ', UUID)
        // check to see if the user exists
        RedisClient.LRANGE('RegisteredDevices', 0, -1, (err, reply) => {
            reply.indexOf(UUID) === -1 ? acceptRegistration(UUID) : rejectRegistration(UUID);
        })
    })

    // request all registered users
    socket.on('requestAllRegisteredUsers', (data) => {
        RedisClient.LRANGE('RegisteredDevices', 0, -1, (err, reply) => {
            socket.emit('responseAllRegisteredUsers', reply)
        })
    })

    // get data from user and load it in a hashmap
    socket.on('clientData' , (payload) => {
        let validatedPayload = typeof(payload) === 'string' ? JSON.parse(payload) : payload;
        // console.log(validatedPayload)
        const processData = () => {
            sendValidResponse(validatedPayload.UUID);
            const processSensor = (keys, validatedPayload) => {
                // console.log(payload.UUID, keys, payload[keys])
                // console.log(`${payload.UUID}, ${keys}, ${JSON.stringify(payload[keys])}`)
                const processChildValues = (value) => {
                    console.log('value from processChildValues', value)
                    Object.keys(value).forEach( (val)=> {
                        return typeof(value[val]) !== 'object' ? val : 'false';
                    })
                }
                const processChild = (keys, child, value) =>{
                    console.log(`${keys}_${child}_${processChildValues(value)}`)
                    // console.log('value from processChild ', value, 'the key for the value is ', keys, 'child', child)
                    // RedisClient.HSET(validatedPayload.UUID, `${keys}_${child}`,  )
                }
                Object.keys(pay = validatedPayload[keys]).forEach( (value) => {
                    // typeof(pay[value]) !== 'object' ? console.log(keys , ' -> ', value , ' - ', pay[value]) : false
                    typeof(pay[value]) !== 'object' ? RedisClient.HSET(validatedPayload.UUID, `${keys}_${value}`, `${pay[value]}`) : processChild(keys, value, pay[value]);
                })

            }
            Object.keys(validatedPayload).forEach((keys) => {
                Object.keys(sensorType).forEach( (value) => {
                    keys === value ? processSensor(keys, validatedPayload) : false;
                })
            })
            
            RedisClient.HGETALL(validatedPayload.UUID, (err, reply) => {
                socket.broadcast.emit(validatedPayload.UUID, reply);
                console.log('reply from hgetALL', reply)
            })
        }

        typeof(validatedPayload) === 'object' && validatedPayload.UUID ? processData() : console.log('error getting data');
    })

});

server.listen(3001);
